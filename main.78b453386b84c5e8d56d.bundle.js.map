{"version":3,"file":"main.78b453386b84c5e8d56d.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["/**\n * @fileoverview TOAST UI Calendar React wrapper component\n * @author NHN Ent. FE Development Lab <dl_javascript@nhnent.com>\n */\nimport React from 'react';\nimport TuiCalendar from 'tui-calendar';\n\nexport default class Calendar extends React.Component {\n  rootEl = React.createRef();\n\n  optionProps = [\n    'disableDblClick',\n    'isReadOnly',\n    'month',\n    'scheduleView',\n    'taskView',\n    'theme',\n    'timeZone',\n    'week'\n  ];\n\n  calendarInst = null;\n\n  componentDidMount() {\n    const {\n      calendars = [],\n      disableDblClick = false,\n      isReadOnly = false,\n      month = {},\n      scheduleView = true,\n      taskView = true,\n      template = {},\n      theme = {},\n      timezones = [],\n      useCreationPopup = true,\n      useDetailPopup = true,\n      view = 'week',\n      week = {}\n    } = this.props;\n\n    this.calendarInst = new TuiCalendar(this.rootEl.current, {\n      ...this.props,\n      calendars,\n      defaultView: view,\n      disableDblClick,\n      isReadOnly,\n      month,\n      scheduleView,\n      taskView,\n      template,\n      theme,\n      timezones,\n      useCreationPopup,\n      useDetailPopup,\n      week\n    });\n\n    this.bindEventHandlers();\n\n    const {schedules = []} = this.props;\n\n    this.setCalendars(calendars);\n    this.setSchedules(schedules);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const {calendars, height, schedules, theme, view} = this.props;\n\n    if (height !== nextProps.height) {\n      this.getRootElement().style.height = height;\n    }\n\n    if (calendars !== nextProps.calendars) {\n      this.setCalendars(nextProps.calendars);\n    }\n\n    if (schedules !== nextProps.schedules) {\n      this.calendarInst.clear();\n      this.setSchedules(nextProps.schedules);\n    }\n\n    if (theme !== nextProps.theme) {\n      this.calendarInst.setTheme(this.cloneData(nextProps.theme));\n    }\n\n    if (view !== nextProps.view) {\n      this.calendarInst.changeView(nextProps.view);\n    }\n\n    this.optionProps.forEach((key) => {\n      if (this.props[key] !== nextProps[key]) {\n        this.setOptions(key, nextProps[key]);\n      }\n    });\n\n    return false;\n  }\n\n  componentWillUnmount() {\n    this.unbindEventHandlers();\n    this.calendarInst.destroy();\n  }\n\n  cloneData(data) {\n    return JSON.parse(JSON.stringify(data));\n  }\n\n  setCalendars(calendars) {\n    if (calendars && calendars.length) {\n      this.calendarInst.setCalendars(calendars);\n    }\n  }\n\n  setSchedules(schedules) {\n    if (schedules && schedules.length) {\n      this.calendarInst.createSchedules(schedules);\n    }\n  }\n\n  setOptions(propKey, prop) {\n    this.calendarInst.setOptions({[propKey]: prop});\n  }\n\n  getInstance() {\n    return this.calendarInst;\n  }\n\n  getRootElement() {\n    return this.rootEl.current;\n  }\n\n  bindEventHandlers() {\n    Object.keys(this.props)\n      .filter((key) => /on[A-Z][a-zA-Z]+/.test(key))\n      .forEach((key) => {\n        const eventName = key[2].toLowerCase() + key.slice(3);\n        this.calendarInst.on(eventName, this.props[key]);\n      });\n  }\n\n  unbindEventHandlers() {\n    Object.keys(this.props)\n      .filter((key) => /on[A-Z][a-zA-Z]+/.test(key))\n      .forEach((key) => {\n        const eventName = key[2].toLowerCase() + key.slice(3);\n        this.calendarInst.off(eventName);\n      });\n  }\n\n  render() {\n    return <div ref={this.rootEl} style={{height: this.props.height || '100%'}} />;\n  }\n}\n"],"mappings":"AAOA","sourceRoot":""}